
using SOLID_LiskovSubstitutionPrinciple.Models;

Account acc = new MicroAccount();
CalculateInterest(acc); // получаем 1100 без бонуса 100

Console.ReadLine();

static void CalculateInterest(Account account)
{
    decimal sum = account.GetInterest(1000, 1, 10); // 1000 + 1000 * 10 / 100 + 100 (бонус)
    if (sum != 1200) // ожидаем 1200
    {
        throw new Exception("Неожиданная сумма при вычислениях");
    }
}
//Подкласс не должен требовать от вызывающего кода, больше чем базовый класс,
//и не должен предоставлять вызывающему коду, меньше чем базовый класс


//Проблема в том что в классе наследнике не выполняется постусловие


//Постусловия (Postconditions) не могут быть ослаблены в подклассе.
//То есть подклассы должны выполнять все постусловия, которые определены в базовом классе.

//Инварианты(Invariants) — все условия базового класса - также должны быть сохранены и в подклассе

//Инварианты - это некоторые условия, которые остаются истинными на протяжении всей жизни объекта.
//Как правило, инварианты передают внутреннее состояние объекта. Например: